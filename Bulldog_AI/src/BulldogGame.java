package src;

/********************************************************/
/* Wyatt McCurdy                                        */
/* Login ID: wyatt.mccurdy@maine.edu                    */
/* COS 520, Spring 2025                                 */
/* Programming Assignment 6                             */
/* BulldogGame class: Manages the game between two      */
/*           players until one reaches 104 points       */
/*      See Kettering University, CS-101, Prog 6        */
/*                                                      */
/* Code generated by GPT 4o                             */
/********************************************************/

import java.util.Scanner;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Random;

/**
 * BulldogGame class manages the game between two to five players until one reaches 104 points.
 * It provides a simple UI for user interaction.
 */
public class BulldogGame extends JFrame {

    private static final int WINNING_SCORE = 104;
    private Scanner scanner;
    private JTextArea textArea;
    private JButton submitButton;
    private JButton startGameButton;
    private int numPlayers;
    private Player[] players;
    private HashMap<String, Player> selectedPlayers;
    private int[] scores;
    private boolean gameWon;
    private JPanel centerPanel;
    private Random random;

    /**
     * Constructor initializes the game and sets up the UI.
     */
    public BulldogGame() {
        scanner = new Scanner(System.in);
        selectedPlayers = new HashMap<>();
        random = new Random();
        setupUI();
    }

    /**
     * Sets up the user interface for the game.
     */
    private void setupUI() {
        setTitle("Bulldog Game");
        setSize(1000, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Center text area
        textArea = new JTextArea("Welcome to the bulldog dice game!\nPlease use the checkboxes above\nto indicate the players you wish to participate");
        textArea.setEditable(false);
        add(new JScrollPane(textArea), BorderLayout.EAST);

        // Input panel 
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BorderLayout());

        // Add checkboxes for player selection
        JPanel playerSelectionPanel = new JPanel();
        playerSelectionPanel.setLayout(new GridLayout(6, 1));
        playerSelectionPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // Add border

        // Create checkboxes for each player type
        JCheckBox wimpPlayerCheckBox = new JCheckBox("WimpPlayer");
        JCheckBox randomPlayerCheckBox = new JCheckBox("RandomPlayer");
        JCheckBox fifteenPlayerCheckBox = new JCheckBox("FifteenPlayer");
        JCheckBox humanPlayerCheckBox = new JCheckBox("HumanPlayer");
        JCheckBox uniquePlayerGPTCheckBox = new JCheckBox("UniquePlayerGPT");
        JCheckBox uniquePlayerHumanCheckBox = new JCheckBox("UniquePlayerHuman");

        // Add action listeners to checkboxes
        wimpPlayerCheckBox.addActionListener(e -> togglePlayerSelection("WimpPlayer", new WimpPlayer(), wimpPlayerCheckBox.isSelected()));
        randomPlayerCheckBox.addActionListener(e -> togglePlayerSelection("RandomPlayer", new RandomPlayer(), randomPlayerCheckBox.isSelected()));
        fifteenPlayerCheckBox.addActionListener(e -> togglePlayerSelection("FifteenPlayer", new FifteenPlayer(), fifteenPlayerCheckBox.isSelected()));
        humanPlayerCheckBox.addActionListener(e -> togglePlayerSelection("HumanPlayer", new HumanPlayer(), humanPlayerCheckBox.isSelected()));
        uniquePlayerGPTCheckBox.addActionListener(e -> togglePlayerSelection("UniquePlayerGPT", new UniquePlayerGPT(), uniquePlayerGPTCheckBox.isSelected()));
        uniquePlayerHumanCheckBox.addActionListener(e -> togglePlayerSelection("UniquePlayerHuman", new UniquePlayerHuman(), uniquePlayerHumanCheckBox.isSelected()));

        // Add player checkboxes to the player selection panel
        playerSelectionPanel.add(wimpPlayerCheckBox);
        playerSelectionPanel.add(randomPlayerCheckBox);
        playerSelectionPanel.add(fifteenPlayerCheckBox);
        playerSelectionPanel.add(humanPlayerCheckBox);
        playerSelectionPanel.add(uniquePlayerGPTCheckBox);
        playerSelectionPanel.add(uniquePlayerHumanCheckBox);

        // Submit button
        submitButton = new JButton("Submit");
        playerSelectionPanel.add(submitButton);

        // Add the player selection panel to the west
        add(playerSelectionPanel, BorderLayout.WEST);

        // Center panel
        centerPanel = new JPanel();
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));
        centerPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // Add border
        add(centerPanel, BorderLayout.CENTER);

        // Action listener for the submit button
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                centerPanel.removeAll();
                for (String playerType : selectedPlayers.keySet()) {
                    JLabel playerLabel = new JLabel("<html><u>" + playerType + "</u><br>Turn score: <br>Total score: </html>");
                    centerPanel.add(playerLabel);
                }
                centerPanel.revalidate();
                centerPanel.repaint();
            }
        });

        // Start Game button
        startGameButton = new JButton("Start Game");
        startGameButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                numPlayers = selectedPlayers.size();
                if (numPlayers < 2 || numPlayers > 5) {
                    textArea.append("\nPlease select between 2 to 5 players to start the game.\n");
                } else {
                    startGame();
                }
            }
        });
        add(startGameButton, BorderLayout.SOUTH);

        setVisible(true);
    }

    /**
     * Starts the game by initializing players and their scores, and managing the game loop.
     */
    public void startGame() {

        gameWon = false;
        // Game loop
        while (!gameWon) {
            for (Player player : selectedPlayers.values()) {
                
                // Set turn score to zero in order to get a proper turn score
                player.setTurnScore(0);

                textArea.append("\n" + player.getName() + "'s turn:\n");
                int roll = roll_d6();
                boolean player_going = player.evaulate_roll(roll);
                textArea.append(player.getName() + " rolled a " + roll + "\n");
                textArea.append(player.getName() + "'s turn score is " + player.getTurnScore() + "\n");

                while (player_going) {
                    roll = roll_d6();
                    textArea.append(player.getName() + "Rolled a " + roll + "\n");
                    player_going = player.evaulate_roll(roll);
                    textArea.append(player.getName() + "'s turn score is " + player.getTurnScore() + "\n");
                }

                textArea.append(player.getName() + "'s total score is " + player.getScore() + "\n");
                textArea.append("\n*************************************************************\n");

                // Check if the current player has won
                if (player.getScore() >= WINNING_SCORE) {
                    gameWon = true;
                    break;
                }
            }
        }

        textArea.append("\nThank you for playing Bulldog Game!\n");
    }

    /**
     * Rolls a six-sided die.
     * @return The result of the die roll (1-6).
     */
    private int roll_d6() {
        return random.nextInt(6) + 1;
    }

    /**
     * Toggles the selection of a player type.
     * @param playerType The type of player.
     * @param player The player object.
     * @param isSelected Whether the player is selected.
     */
    private void togglePlayerSelection(String playerType, Player player, boolean isSelected) {
        System.out.println(player.getName() + " has been added to hashmap.");
        if (isSelected) {
            selectedPlayers.put(playerType, player);
        } else {
            selectedPlayers.remove(playerType);
        }
    }

    /**
     * Main method to start the BulldogGame.
     * @param args Command line arguments.
     */
    public static void main(String[] args) {
        new BulldogGame();
    }
}