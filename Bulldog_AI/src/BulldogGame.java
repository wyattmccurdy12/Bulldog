package src;
/********************************************************/
/* Wyatt McCurdy                                        */
/* Login ID: wyatt.mccurdy@maine.edu                    */
/* COS 520, Spring 2025                                 */
/* Programming Assignment 6                             */
/* BulldogGame class: Manages the game between two      */
/*           players until one reaches 104 points       */
/*      See Kettering University, CS-101, Prog 6        */
/*                                                      */
/* Code generated by GPT 4o                             */
/********************************************************/

import java.util.Scanner;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

/**
 * BulldogGame class manages the game between two to five players until one reaches 104 points.
 * It provides a simple UI for user interaction.
 */
public class BulldogGame extends JFrame {

    private static final int WINNING_SCORE = 104;
    private Scanner scanner;
    private JTextArea textArea;
    private JButton submitButton;
    private int numPlayers;
    private Player[] players;
    private HashMap<String, Player> selectedPlayers;
    private int[] scores;
    private boolean gameWon;

    /**
     * Constructor initializes the game and sets up the UI.
     */
    public BulldogGame() {
        scanner = new Scanner(System.in);
        selectedPlayers = new HashMap<>();
        setupUI();
    }

    /**
     * Sets up the user interface for the game.
     */
    private void setupUI() {
        setTitle("Bulldog Game");
        setSize(700, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Center text area
        textArea = new JTextArea("Welcome to the bulldog dice game!\nPlease use the checkboxes above\nto indicate the players you wish to participate");
        textArea.setEditable(false);
        add(new JScrollPane(textArea), BorderLayout.NORTH);

        // Input panel 
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BorderLayout());

        // Add checkboxes for player selection
        JPanel playerSelectionPanel = new JPanel();
        playerSelectionPanel.setLayout(new GridLayout(6, 1));
        JCheckBox wimpPlayerCheckBox = new JCheckBox("WimpPlayer");
        JCheckBox randomPlayerCheckBox = new JCheckBox("RandomPlayer");
        JCheckBox fifteenPlayerCheckBox = new JCheckBox("FifteenPlayer");
        JCheckBox humanPlayerCheckBox = new JCheckBox("HumanPlayer");
        JCheckBox uniquePlayerGPTCheckBox = new JCheckBox("UniquePlayerGPT");
        JCheckBox uniquePlayerHumanCheckBox = new JCheckBox("UniquePlayerHuman");

        // Add action listeners to checkboxes
        wimpPlayerCheckBox.addActionListener(e -> togglePlayerSelection("WimpPlayer", new WimpPlayer(), wimpPlayerCheckBox.isSelected()));
        randomPlayerCheckBox.addActionListener(e -> togglePlayerSelection("RandomPlayer", new RandomPlayer(), randomPlayerCheckBox.isSelected()));
        fifteenPlayerCheckBox.addActionListener(e -> togglePlayerSelection("FifteenPlayer", new FifteenPlayer(), fifteenPlayerCheckBox.isSelected()));
        humanPlayerCheckBox.addActionListener(e -> togglePlayerSelection("HumanPlayer", new HumanPlayer(), humanPlayerCheckBox.isSelected()));
        uniquePlayerGPTCheckBox.addActionListener(e -> togglePlayerSelection("UniquePlayerGPT", new UniquePlayerGPT(), uniquePlayerGPTCheckBox.isSelected()));
        uniquePlayerHumanCheckBox.addActionListener(e -> togglePlayerSelection("UniquePlayerHuman", new UniquePlayerHuman(), uniquePlayerHumanCheckBox.isSelected()));

        // Add player checkboxes to the western panel
        playerSelectionPanel.add(wimpPlayerCheckBox);
        playerSelectionPanel.add(randomPlayerCheckBox);
        playerSelectionPanel.add(fifteenPlayerCheckBox);
        playerSelectionPanel.add(humanPlayerCheckBox);
        playerSelectionPanel.add(uniquePlayerGPTCheckBox);
        playerSelectionPanel.add(uniquePlayerHumanCheckBox);

        // Submit button.
        submitButton = new JButton("Submit");
        playerSelectionPanel.add(submitButton);

        /* 
         * This action listener will populate the blank center with 
         * the names of the currently playing players, and 
         * their current turn score, as well as total score. 
         */
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Players: " + selectedPlayers.toString());

            }
        });

        add(playerSelectionPanel, BorderLayout.WEST);

        setVisible(true);
    }

    /**
     * Starts the game by initializing players and their scores, and managing the game loop.
     */
    public void startGame() {
        players = new Player[numPlayers];
        scores = new int[numPlayers];

        // Initialize players and their scores
        for (int i = 0; i < numPlayers; i++) {
            players[i] = selectPlayer(i + 1);
            scores[i] = 0;
        }

        gameWon = false;
        // Game loop
        while (!gameWon) {
            for (int i = 0; i < numPlayers; i++) {
                textArea.append("\nPlayer " + (i + 1) + " (" + players[i].getName() + ")'s turn:\n");
                scores[i] += players[i].play();
                textArea.append("Player " + (i + 1) + " (" + players[i].getName() + ")'s total score: " + scores[i] + "\n");

                // Check if the current player has won
                if (scores[i] >= WINNING_SCORE) {
                    textArea.append("\nPlayer " + (i + 1) + " (" + players[i].getName() + ") wins!\n");
                    gameWon = true;
                    break;
                }
            }
        }

        textArea.append("\nThank you for playing Bulldog Game!\n");
    }

    /**
     * Prompts the user to select a player type for each player.
     * @param playerNumber The player number.
     * @return The selected Player object.
     */
    private Player selectPlayer(int playerNumber) {
        textArea.append("Select Player " + playerNumber + ":\n");
        textArea.append("1. WimpPlayer\n");
        textArea.append("2. RandomPlayer\n");
        textArea.append("3. FifteenPlayer\n");
        textArea.append("4. HumanPlayer\n");
        textArea.append("5. UniquePlayerGPT\n");
        textArea.append("6. UniquePlayerHuman\n");
        textArea.append("Enter your choice: ");
        int choice = Integer.parseInt(scanner.nextLine().trim());

        switch (choice) {
            case 1:
                return new WimpPlayer();
            case 2:
                return new RandomPlayer();
            case 3:
                return new FifteenPlayer();
            case 4:
                return new HumanPlayer();
            case 5:
                return new UniquePlayerGPT();
            case 6: 
                return new UniquePlayerHuman();
            default:
                textArea.append("Invalid choice. Defaulting to WimpPlayer.\n");
                return new WimpPlayer();
        }
    }

    private void togglePlayerSelection(String playerType, Player player, boolean isSelected) {
        System.out.println(player.getName() + " has been added to hashmap.");
        if (isSelected) {
            selectedPlayers.put(playerType, player);
        } else {
            selectedPlayers.remove(playerType);
        }
    }

    /**
     * Main method to start the BulldogGame.
     * @param args Command line arguments.
     */
    public static void main(String[] args) {
        new BulldogGame();
    }
}
