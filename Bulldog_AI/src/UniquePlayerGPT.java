package src;
/********************************************************/
/* Wyatt McCurdy                                        */
/* Login ID: wyatt.mccurdy@maine.edu                    */
/* COS 520, Spring 2025                                 */
/* Programming Assignment 6                             */
/* UniquePlayerGPT class: extends Player class          */
/*           A UniquePlayerGPT uses a unique strategy   */
/*           to maximize the score                      */
/*      See Kettering University, CS-101, Prog 6        */
/*                                                      */
/* Code generated by GPT 4o                             */
/********************************************************/

/**
 * UniquePlayerGPT class: A unique player that uses a unique strategy to maximize the score.
 */
public class UniquePlayerGPT extends Player {

    /**
     * Constructor: Creates a default UniquePlayerGPT.
     */
    public UniquePlayerGPT() {
        this("UniqueGPT");
    }

    /**
     * Constructor: Creates a new UniquePlayerGPT object with the given name.
     * @param name The name of the player being created.
     */
    public UniquePlayerGPT(String name) {
        super(name);
    }

    /**
     * This method will decide whether or not to continue rolling based on a unique strategy.
     */
    public boolean evaulate_roll(int roll) {
        // update score
        setTurnScore(getTurnScore() + roll);

        if (roll == 6) {
            setTurnScore(0);
            return false;
        } else if (getTurnScore() >= 10 || roll >= 4) {
            return false;
        }
        return true;
    }

    /**
     * Takes one turn for this player using a unique strategy to maximize the score.
     * @return The score earned by the player on this turn, which will be zero if a six was rolled.
     */
    public int play() {
        setTurnScore(0);
        boolean continueRolling = true;

        while (continueRolling) {
            int roll = (int) (Math.random() * 6 + 1);
            continueRolling = evaulate_roll(roll);
        }

        setScore(getScore() + getTurnScore());
        return getTurnScore();
    }
}