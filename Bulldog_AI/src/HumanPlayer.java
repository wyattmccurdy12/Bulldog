package src;
/********************************************************/
/* Wyatt McCurdy                                        */
/* Login ID: wyatt.mccurdy@maine.edu                    */
/* COS 520, Spring 2025                                 */
/* Programming Assignment 6                             */
/* HumanPlayer class: extends Player class              */
/*           A HumanPlayer allows the human to decide   */
/*           whether to roll or end the turn            */
/*      See Kettering University, CS-101, Prog 6        */
/*                                                      */
/* Code generated by GPT 4o                             */
/********************************************************/

/**
 * HumanPlayer class: A player that allows the human to decide whether to roll or end the turn.
 */
import java.util.Scanner;

public class HumanPlayer extends Player {
    private Scanner scanner = new Scanner(System.in);

    /**
     * Constructor: Creates a default HumanPlayer.
     */
    public HumanPlayer() {
        this("Human");
    }

    /**
     * Constructor: Creates a new HumanPlayer object with the given name.
     * @param name The name of the player being created.
     */
    public HumanPlayer(String name) {
        super(name);
    }

    /**
     * This method will decide whether or not to continue rolling based on the player's input.
     */
    public boolean evaulate_roll(int roll) {
        // update score
        setTurnScore(getTurnScore() + roll);

        if (roll == 6) {
            setTurnScore(0);
            return false;
        } else {
            return true;
        }
    }

    /**
     * Takes one turn for this player, allowing the human to decide whether to roll or end the turn.
     * @return The score earned by the player on this turn, which will be zero if a six was rolled.
     */
    public int play() {
        setTurnScore(0);
        boolean continueRolling = true;

        while (continueRolling) {
            int roll = (int) (Math.random() * 6 + 1);
            continueRolling = evaulate_roll(roll);
        }

        setScore(getScore() + getTurnScore());
        System.out.println(getName() + "'s total score is " + getScore());
        return getTurnScore();
    }
}